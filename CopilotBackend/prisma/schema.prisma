// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id              String      @id @default(uuid())
  email           String      @unique
  firstName       String
  lastName        String
  userType        String      @default("default")
  carPlate        String?     // Keep this for backward compatibility
  car             Car?        // Add relation to Car model
  carColor        String?     // Add this
  carMake         String?     // Add this
  carState        String?     // Add this
  organizedEvents Event[]     // Relation to events organized by this user
  participatingIn Event[]     @relation("EventParticipants")
  eventUsers      EventUser[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt    // Add this field to track updates
  isActive        Boolean     @default(true) // Add this for user account status
}

model Event {
  id              String      @id @default(uuid())
  meetingName     String
  startTime       DateTime    // Renamed from meetingTime
  endTime         DateTime?   // New field added
  meetingBuilding String
  organizer       User        @relation(fields: [organizerId], references: [id])
  organizerId     String
  participants    User[]      @relation("EventParticipants")
  eventUsers      EventUser[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt    // Add this field
  status          String      @default("active") // Add status field for event lifecycle
  description     String?    // Optional event description
}

model Conversation {
  id              String    @id @default(uuid())
  conversationId  String    // to group chats
  eventUser       EventUser @relation(fields: [eventUserId], references: [id])
  eventUserId     String
  sender          String    // 'user' or 'bot'
  message         String
  mediaUrl        String?
  specialNotes    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt    // Add this field
  isRead          Boolean   @default(false) // Add read status
}

model EventUser {
  id             String         @id @default(uuid())
  event          Event          @relation(fields: [eventId], references: [id])
  eventId        String
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  activationCode String         @unique
  parkingSpot    String?        @unique
  conversations  Conversation[]
  createdAt      DateTime       @default(now())     // Add this field
  updatedAt      DateTime       @updatedAt          // Add this field
  status         String         @default("pending") // Add status field
  checkInTime    DateTime?      // Add check-in timestamp
  checkOutTime   DateTime?      // Add check-out timestamp

  @@unique([eventId, userId])
}

model Map {
  id               String    @id @default(uuid())
  mapNickname      String    @unique
  mediaUrl         String    // URL for map image
  floorNumber      Int
  areaType         String    // e.g., 'visitor', 'accessibility', 'ev' etc.
  assignedEntrance String    // entrance point reference
  targetBuilding   String    // destination building reference
  isActive         Boolean   @default(true) // Add this for map availability
  createdAt        DateTime  @default(now())     // Add this field
  updatedAt        DateTime  @updatedAt          // Add this field
  capacity         Int?      // Optional capacity for the parking area
  
  @@index([targetBuilding, assignedEntrance]) // Index for quick lookups in recommendation system
}

model Car {
  id        String   @id @default(uuid())
  carPlate  String   @unique
  carColor  String?
  carMake   String?
  carState  String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Garage {
  id                 String   @id @default(uuid())
  tag                String   // accessible, general, carpool, ev, vendor, patrol, cbre
  color              String   // blue, orange, green
  zone               String   // A, B, C, D
  spots              Int      // number of parking spots
  stallNumber        String?  // stall number
  elevator1          String   // North, West, East, South
  elevatorBuilding1  String   // building numbers served by elevator1
  weight1            Int      // priority weight for elevator1
  elevator2          String   // North, West, East, South
  elevatorBuilding2  String   // building numbers served by elevator2
  weight2            Int      // priority weight for elevator2
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([color, tag])
  @@index([zone, spots])
}

model EntranceAndExit {
  id        String   @id @default(uuid())
  name      String   @unique
  color     String   // blue, orange, green
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([color])
}

